#!/bin/bash
# Requires curl, sshpass to be installed
type curl >/dev/null 2>&1 || { echo >&2 "I require curl but it's not installed.  Aborting."; exit 1; }
type sshpass >/dev/null 2>&1 || { echo >&2 "I require sshpass but it's not installed.  Aborting."; exit 1; }

# Run disk, app and RAM checks repeatedly
# on some hosts over ssh.
# If app is down or a number is too low then send emails.

# Note: you must ensure that the 'monitor' user exists
# on each host and can log in over ssh.

if [[ ! -f ./config ]]; then
  echo "Create config file (use config.default as template)"
  exit 1
fi

getscriptdir() {
  SOURCE="${BASH_SOURCE[0]}"
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}

getscriptdir

sendgmail(){
  # $emailbody = body of email
  # $emails = recepints
  for emailaddr in "${emails[@]}"
  do
    rm mail.txt
    touch mail.txt
    echo 'From: "alerter" <alerter@scripto.me>' >> mail.txt
    echo 'To: "user" <$emailaddr>'              >> mail.txt
    echo "Subject: $emailbody"                  >> mail.txt
    echo ''                                     >> mail.txt
    echo "$emailbody"                           >> mail.txt
    echo "Sending the following email text:"
    echo "$emailbody"

    echo "Sending to $emailaddr.."
    curl --url "smtps://smtp.gmail.com:465" --ssl-reqd \
         --mail-from "$gmailuser" --mail-rcpt "$emailaddr" \
         --upload-file mail.txt --user "$gmailuser:$gmailpass" --insecure
  done
}

alert_if_low_disk() {
  # $1 = perc_disk_free
  # $2 = host
  if (( $1 < min_disk_free )); then
    emailbody="Low disk space on $hst: only $1% free"
    sendgmail
  fi
}

alert_if_low_ram() {
  # $1 = mb_ram_free
  # $2 = host
  if (( $1 < min_ram_mb_free )); then
    emailbody="Low memory on $hst: only $1 mb ram free"
    sendgmail
  fi
}

alert_if_app_not_running() {
  # $1 = 'ok' or 'fail'
  # $2 = host
  if [[ "$1" == "fail" ]]; then
    emailbody="App not running on $hst"
    sendgmail 
  fi
}


monitor() {
  while :
  do
    source ./config
    cat config check >configcheck
    chmod u+x configcheck
    for hst in "${hosts[@]}"
    do
      IFS=$'\n'
      stats=( $($DIR/timeout -t 60 sshpass -p $remotepass ssh $remoteuser@$hst 'bash -s' < configcheck 2>/dev/null) )
      if [[ "$stats" == "" ]]; then
        emailbody="Could not connect to $hst"
        echo "emailbody is " $emailbody
        sendgmail
      else
        declare -i perc_disk_free
        declare -i mb_ram_free
        perc_disk_free=${stats[0]}
        mb_ram_free=${stats[1]}
        app_running=${stats[2]}
        echo "Stats for $hst: df=$perc_disk_free% ramfree=$mb_ram_free mb app running=$app_running"
        alert_if_low_disk $perc_disk_free $hst
        alert_if_low_ram $mb_ram_free $hst
        alert_if_app_not_running $app_running $hst
      fi
    done
    sleep $check_interval
  done
}

monitor
